/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
	// Apply the java-library plugin for API and implementation separation.
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
	id 'com.diffplug.spotless' version '6.18.0'
}

repositories {
	mavenCentral()
}

def grpcVersion = "1.59.0"

dependencies {
	runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
	api "io.grpc:grpc-protobuf:${grpcVersion}"
	api "io.grpc:grpc-stub:${grpcVersion}"
	api "io.grpc:grpc-services:${grpcVersion}"
	compileOnly "org.apache.tomcat:annotations-api:6.0.53" // necessary for Java 9+
}

javadoc.options.addStringOption('Xdoclint:none', '-quiet')

shadowJar {
	mergeServiceFiles()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
		vendor = JvmVendorSpec.ADOPTIUM
	}
	withJavadocJar()
	withSourcesJar()
}

version = project.findProperty('version')
group = 'de.uni-trier.recap'

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
			username = System.getenv("OSSRH_ACTOR")
			password = System.getenv("OSSRH_TOKEN")
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = "arg-services"
			from components.java
			pom {
				name = "Argumentation Microservices"
				description = 'gRPC definitions for microservice-based argumentation machines'
				url = 'https://github.com/recap-utr/arg-services'
				licenses {
					license {
						name = 'MIT'
						url = 'https://spdx.org/licenses/MIT.html'
					}
				}
				organization {
					name = "ReCAP at Trier University"
					url = 'https://recap.uni-trier.de'
				}
				developers {
					developer {
						id = 'mirkolenz'
						name = 'Mirko Lenz'
						email = 'mirko@mirkolenz.com'
						url = 'https://www.mirkolenz.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/recap-utr/arg-services-java.git'
					developerConnection = 'scm:git:ssh://github.com/recap-utr/arg-services-java.git'
					url = 'http://github.com/recap-utr/arg-services-java/'
				}
			}
		}
	}

	// Currently not used because gradle-semantic-release-plugin only calls the nexus task
	repositories {
		maven {
			name = 'GitHubPackages'
			url = uri('https://maven.pkg.github.com/recap-utr/arg-services-java')
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}

signing {
	// signingKey: gpg --armor --export-secret-keys KEY_ID
	def signingKey = System.getenv("SIGNING_KEY")
	def signingPassword = System.getenv("SIGNING_PASSWORD")
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications.mavenJava
}

spotless {
	groovyGradle {
		greclipse()
	}
}
