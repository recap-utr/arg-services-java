/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    // id 'com.google.protobuf' version '0.8.18' // not needed due to buf.build
}

repositories {
    mavenCentral()
}

def grpcVersion = "1.51.1"

dependencies {
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53" // necessary for Java 9+
}

version = project.findProperty('version')
group = 'de.uni-trier.recap'

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = 'arg-services'
                description = 'gRPC definitions for microservice-based argumentation machines'
                url = 'https://github.com/recap-utr/arg-services'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://spdx.org/licenses/MIT.html'
                    }
                }
                organization {
                    name = "ReCAP at Trier University"
                    url = 'https://recap.uni-trier.de'
                }
                developers {
                    developer {
                        id = 'mirkolenz'
                        name = 'Mirko Lenz'
                        email = 'mirko@mirkolenz.com'
                        url = 'https://www.mirkolenz.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/recap-utr/arg-services-java.git'
                    developerConnection = 'scm:git:ssh://github.com/recap-utr/arg-services-java.git'
                    url = 'http://github.com/recap-utr/arg-services-java/'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/recap-utr/arg-services')
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = 'OSSRH'
            credentials {
                username = System.getenv("OSSRH_ACTOR")
                password = System.getenv("OSSRH_TOKEN")
            }
        }
    }
}
